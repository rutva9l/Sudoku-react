{"version":3,"sources":["components/grid.jsx","components/sudokuBox.jsx","components/buttons.jsx","App.js","reportWebVitals.js","index.js"],"names":["Grid","handleChange","e","val","target","value","parseInt","props","onChange","cell","this","className","readOnly","prefilled","Component","SudokuBox","sudoku","rows","map","row","cols","column","col","index","Buttons","onClick","onStart","correct","wrong","makeSudoku","puzzle","generator","makepuzzle","total","solution","solvepuzzle","i","j","push","console","log","App","state","sudokuArray","entries","grid","document","querySelectorAll","setState","flat","classList","remove","style","borderBottom","handleCheck","add","startNew","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.a0920a1d.chunk.js","sourcesContent":["import React,{Component} from 'react';\r\n\r\nclass Grid extends Component {\r\n    handleChange=e=>{\r\n        const val=e.target.value===\"\"?\"\":parseInt(e.target.value,10);\r\n        this.props.onChange({...this.props.cell,value:val});\r\n    }\r\n    render() { \r\n        const {cell}=this.props;\r\n        return <input className={\"grid\"} value={cell.value || \"\"} readOnly={cell.prefilled} onChange={this.handleChange} />\r\n    }\r\n}\r\n \r\nexport default Grid;","import React, { Component } from 'react';\r\nimport Grid from './grid';\r\n\r\nclass SudokuBox extends Component {\r\n    render() { \r\n        const {sudoku}=this.props;\r\n        return ( \r\n            <div>\r\n                {sudoku.rows.map(row=>\r\n                    <div className=\"row\" key={row.index}>\r\n                        {row.cols.map(column=>\r\n                            <Grid key={column.col} cell={column} onChange={this.props.onChange} />\r\n                        )}\r\n                    </div>\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n \r\nexport default SudokuBox;","import React, { Component } from 'react';\r\n\r\nclass Buttons extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"row\">\r\n                <button onClick={this.props.onClick} className=\"check\">Check sudoku</button>\r\n                <button onClick={this.props.onStart} className=\"start\">Start again</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Buttons;","import './App.css';\nimport generator from 'sudoku';\nimport SudokuBox from './components/sudokuBox';\nimport { Component } from 'react';\nimport Buttons from './components/buttons'\n// import produce from 'immer';\n\nconst correct=\"grid-correct\";\nconst wrong=\"grid-wrong\";\n\nconst makeSudoku = () => {\n  const puzzle = generator.makepuzzle();\n  const total = { rows: [] };\n  total.solution = generator.solvepuzzle(puzzle).map(val => val === null ? null : val + 1);\n\n  for (let i = 0; i < 9; i++) {\n    const row = { cols: [], index: i }\n    for (let j = 0; j < 9; j++) {\n      const value = puzzle[i * 9 + j];\n      const val = value === null ? null : (value + 1)\n      const col = { row: i, col: j, value: val, prefilled: value !== null };\n      row.cols.push(col);\n    }\n    total.rows.push(row);\n  }\n  console.log(total.solution);\n  return total;\n}\n\nclass App extends Component {\n  state = {\n    sudokuArray: makeSudoku(),\n    entries:[],\n    grid:[]\n  }\n  handleChange = e => {\n    const { sudokuArray } = this.state;\n    sudokuArray.rows[e.row].cols[e.col].value = e.value;\n    const grid=document.querySelectorAll(\"input.grid\");\n    this.setState({ sudokuArray,grid}); \n    const entries = sudokuArray.rows.map(row => row.cols.map(col => col.value)).flat();\n    this.setState({entries});\n    for(let i=0;i<81;i++){\n      if(entries[i]===\"\" || entries[i]===null){\n        grid[i].classList.remove(correct);\n        grid[i].classList.remove(wrong);\n      }\n    }\n    for(let i=18;i<27;i++){\n      grid[i].style.borderBottom=\"2px solid black\";\n    }\n    for(let i=45;i<54;i++){\n      grid[i].style.borderBottom=\"2px solid black\";\n    }\n  }\n  handleCheck = () => {\n    const { sudokuArray,entries,grid} = this.state;\n    for(let i=0;i<81;i++){\n      if(entries[i]===\"\" || entries[i]===null){\n        grid[i].classList.remove(correct);\n        grid[i].classList.remove(wrong);\n      }\n      else if (entries[i] === sudokuArray.solution[i] && entries[i]!==null) {\n        grid[i].classList.remove(wrong);\n        grid[i].classList.add(correct);\n      } else if(entries[i] !== sudokuArray.solution[i] && entries[i]!==null){\n        grid[i].classList.remove(correct);\n        grid[i].classList.add(wrong);\n      }\n    }\n  }\n  startNew=()=>{\n    const sudokuArray=makeSudoku();\n    const entries = sudokuArray.rows.map(row => row.cols.map(col => col.value)).flat();\n    const grid=document.querySelectorAll(\"input.grid\");\n    for(let i=0;i<81;i++){\n      if(entries[i]===\"\" || entries[i]===null){\n        grid[i].classList.remove(correct);\n        grid[i].classList.remove(wrong);\n      }\n    }\n    this.setState({sudokuArray,entries,grid});\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Sudoku</h1>\n        <SudokuBox sudoku={this.state.sudokuArray} onChange={this.handleChange}/>\n        <Buttons onClick={this.handleCheck} onStart={this.startNew}/>\n      </div>\n    );\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}